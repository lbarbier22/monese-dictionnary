<!DOCTYPE html>
<html lang="fr">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= mot.Mot.charAt(0).toUpperCase() + mot.Mot.slice(1) %> – Monèse</title>
    <link rel="stylesheet" href="/style.css">
</head>

<body>
<%- include('navbar') %>

<div class="main-container">
    <div class="carte">
    <div class="heart-favoris" id="likeButton" data-mot="<%= mot.Mot %>" title="Aimer ce mot">
        <span id="likeIcon">🤍</span>
    </div>
    <div class="mot"><%= mot.Mot.charAt(0).toUpperCase() + mot.Mot.slice(1) %> <span style="color: royalblue"><%= '★'.repeat(mot.Difficulté) %></span></div>
    <div class="type"><%= mot.Type %></div>
    <div class="definition"><%= mot.Définition %></div>
    <div class="exemple">"<%= mot.Exemple %>"</div>
    <div class="bouton">
        <button id="copierLien">🔗 Copier le lien</button>
        <span id="copieMessage" style="display: none; color: green; margin-left: 10px;">Lien copié !</span>
    </div>
</div>
</div>
</body>
</html>

<script>
    function hasUserLiked(mot) {
        const likedWords = JSON.parse(localStorage.getItem('likedWords') || '[]');
        return likedWords.includes(mot.toLowerCase());
    }
    
    function markUserLiked(mot) {
        const likedWords = JSON.parse(localStorage.getItem('likedWords') || '[]');
        const motLower = mot.toLowerCase();
        if (!likedWords.includes(motLower)) {
            likedWords.push(motLower);
            localStorage.setItem('likedWords', JSON.stringify(likedWords));
        }
    }
    
    async function getLikes(mot) {
        try {
            const response = await fetch(`/api/likes/${encodeURIComponent(mot.toLowerCase())}`);
            const data = await response.json();
            return data.likes;
        } catch (error) {
            console.error('Erreur lors de la récupération des likes:', error);
            return 0;
        }
    }

    let isLiking = false;
    
    async function toggleLike(mot) {
        if (isLiking) return;
        
        const userAlreadyLiked = hasUserLiked(mot);
        
        isLiking = true;
        const likeButton = document.getElementById('likeButton');
        likeButton.style.opacity = '0.6';
        
        try {
            if (userAlreadyLiked) {
                const response = await fetch('/api/likes/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ mot: mot.toLowerCase() })
                });
                
                const result = await response.json();
                if (result.success) {
                    removeUserLike(mot);
                    updateLikeDisplay();
                }
            } else {
                const response = await fetch('/api/likes/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ mot: mot.toLowerCase() })
                });
                
                const result = await response.json();
                if (result.success) {
                    markUserLiked(mot);
                    updateLikeDisplay();
                }
            }
            
            const icon = document.getElementById('likeIcon');
            icon.style.transform = 'scale(1.3)';
            setTimeout(() => {
                icon.style.transform = 'scale(1)';
            }, 200);
            
        } catch (error) {
            console.error('Erreur lors de la modification du like:', error);
        } finally {
            setTimeout(() => {
                isLiking = false;
                likeButton.style.opacity = '1';
            }, 500);
        }
    }
    
    function removeUserLike(mot) {
        const likedWords = JSON.parse(localStorage.getItem('likedWords') || '[]');
        const motLower = mot.toLowerCase();
        const index = likedWords.indexOf(motLower);
        if (index > -1) {
            likedWords.splice(index, 1);
            localStorage.setItem('likedWords', JSON.stringify(likedWords));
        }
    }

    function updateLikeDisplay() {
        const motActuel = '<%= mot.Mot %>';
        const icon = document.getElementById('likeIcon');
        
        if (hasUserLiked(motActuel)) {
            icon.textContent = '❤️';
            icon.style.color = '#e74c3c';
        } else {
            icon.textContent = '🤍';
            icon.style.color = '#95a5a6';
        }
    }

    document.addEventListener('DOMContentLoaded', async () => {
        const motActuel = '<%= mot.Mot %>';
        const likeButton = document.getElementById('likeButton');
        
        updateLikeDisplay();
        
        likeButton.addEventListener('click', async () => {
            await toggleLike(motActuel);
        });
    });

    document.getElementById("copierLien").addEventListener("click", () => {
        const url = window.location.href;

        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(url).then(() => {
                afficherMessage();
            }).catch(err => {
                alert("Erreur lors de la copie : " + err);
            });
        } else {
            const input = document.createElement("input");
            document.body.appendChild(input);
            input.value = url;
            input.select();
            document.execCommand("copy");
            document.body.removeChild(input);
            afficherMessage();
        }

        function afficherMessage() {
            const message = document.getElementById("copieMessage");
            message.style.display = "inline";
            setTimeout(() => message.style.display = "none", 2000);
        }
    });
</script>
